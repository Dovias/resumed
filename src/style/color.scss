@use "sass:map";
@use "sass:list";
@use "sass:string";

@use "./utilities/strings";

$_schemes: (
  "light": (
    "primary": #FDE047,
    "secondary": #99F6E4,
    "background": #FEFCE8,
    "foreground": #FFFFFF,
    "contour": #000000,
    "selection": #000000,
    "text-primary": #000000,
    "text-secondary": #000000,
    "text-background": #000000,
    "text-foreground": #000000,
    "text-selection": #FFFFFF
  ),
  "dark": (
    "primary": #FDE047,
    "secondary": #99F6E4,
    "background": #171717,
    "foreground": #FFFFFF,
    "contour": #000000,
    "selection": #000000,
    "text-primary": #000000,
    "text-secondary": #000000,
    "text-background": #000000,
    "text-foreground": #000000,
    "text-selection": #FFFFFF
  )
);

@if list.length(map.keys($_schemes)) > 0 {
  html {
    color-scheme: #{list.join((), map.keys($_schemes), $separator: space)};
  }
}

@each $name, $values in $_schemes {
  @media (prefers-color-scheme: #{$name}) {
    :root {
      @each $key, $color in $values {
        --color-#{$key}: #{$color};
      }
    }
  }
}

@function static($scheme, $color...) {
  $colors: map.get($_scheme, $scheme);
  @if $colors {
    @return map.get($colors, strings.replace("#{$color}", ', ', '-'));
  }
}

@function dynamic($color...) {
  @each $colors in map.values($_schemes) {
    $key: strings.replace("#{$color}", ', ', '-');
    @if map.has-key($colors, $key) {
      @return var(--color-#{$key});
    }
  }
}