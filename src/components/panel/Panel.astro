---
import type {HTMLTag, Polymorphic} from "astro/types";

import type {Accent, Importance as StyleImportance} from "../../types";

export type Importance = StyleImportance;
export type Emphasis = Exclude<StyleImportance, "medium">;

export type AttributeProps = {
  "accent"?: Accent;
  "importance": Importance;
  "emphasis": Emphasis;
};

type _Props = Polymorphic<AttributeProps & {
  "as": HTMLTag;
}>;

export type Props = _Props & Required<Pick<_Props, "as">>;

const {accent, "as": Tag, importance, emphasis, "class": className, ...props} = Astro.props;
---

<Tag class:list={[
  "panel",
  `panel--${accent || `foreground-${importance === "medium" ? "intense" : "subtle"}`}`,
  `panel--shadow-${importance === "high" ? "intense" : "subtle"}`,
  `panel--${emphasis === "high" ? "rounded-full" : "rounded"}`,
  className
]} {...props}>
  <slot />
</Tag>

<style lang="scss" is:global>
  @use "../../style/configuration/color";

  .panel {
    border: 0.2rem solid color.variable("contour");

    &--primary {
      background: color.variable("primary", "accent");
      color: color.variable("primary", "text", "accent");
    }

    &--secondary {
      background: color.variable("secondary", "accent");
      color: color.variable("secondary", "text", "accent");
    }

    &--foreground-intense {
      background: color.variable("secondary", "foreground");
      color: color.variable("secondary", "text", "foreground");
    }

    &--foreground-subtle {
      background: color.variable("primary", "foreground");
      color: color.variable("primary", "text", "foreground");
    }

    &--rounded {
      border-radius: 0.6rem;
    }

    &--rounded-full {
      border-radius: 9999px;
    }

    &--shadow {
      &-intense {
        box-shadow: 0.3em 0.3em 0 color.variable("contour");
      }

      &-subtle {
        box-shadow: 0.1em 0.1em 0 color.variable("contour");
      }
    }
  }
</style>